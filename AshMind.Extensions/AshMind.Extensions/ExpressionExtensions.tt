<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Xml.XPath" #>
<#@ output extension=".cs" #>
<# var net4ExpressionTypes = new HashSet<Type> { 
       typeof(TryExpression),
       typeof(SwitchCase),
       typeof(SwitchExpression),
       typeof(LoopExpression),
       typeof(IndexExpression),
       typeof(BlockExpression)
    };
    var net4MethodNames = new HashSet<string> {
        "AddAssign",
        "AddAssignChecked",
        "AndAssign",
        "Assign",
        "Condition:4",
        "Decrement",
        "DivideAssign",
        "ExclusiveOrAssign",
        "Field:3",
        "IfThen",
        "IfThenElse",
        "Increment",
        "LeftShiftAssign",
        "ModuloAssign",
        "MultiplyAssign",
        "MultiplyAssignChecked",
        "OrAssign",
        "PostDecrementAssign",
        "PostIncrementAssign",
        "PowerAssign",
        "PreDecrementAssign",
        "PreIncrementAssign",
        "Property:3",
        "ReferenceEqual",
        "ReferenceNotEqual",
        "RightShiftAssign",
        "SubtractAssign",
        "SubtractAssignChecked",
        "TypeEqual",
        "IsFalse",
        "IsTrue",
        "OnesComplement",
        "Unbox",
        "Throw"
    };
    var excludedMethodNames = new HashSet<string> { 
        "Lambda",     // no logic in having this == body
        "Lambda`1",
        "Condition",  // ternary operator is not focused around condition
        "Switch",     // same as for Condition
        "SwitchCase",
        "Not",         // x.Not() looks illogical
        "UnaryPlus",   // same as with Not()
        
        // statements where expression is a body or similar:
        "Block",
        "Loop",
        "TryCatch",
        "TryCatchFinally",
        "TryFault",
        "TryFinally"
    };
    
    Func<Type, Func<Type, string>, string, string, string, string> templatedDescribeType = null;
    templatedDescribeType = (type, getName, genericStart, genericComma, genericEnd) => {
        var name = Regex.Replace(getName(type), "`.*$", "");
        if (!type.IsGenericType)
            return name;

        return name + genericStart + string.Join(
            genericComma, type.GetGenericArguments().Select(a => templatedDescribeType(a, getName, genericStart, genericComma, genericEnd))
        ) + genericEnd;
    };

    Func<Type, string> describeType = type => templatedDescribeType(type, t => t.Name, "<", ", ", ">");

    var xmlDocPath = Path.Combine(
        Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86),
        @"Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\System.Core.xml"
       );
       var xmlDoc = XDocument.Load(xmlDocPath);
    
    Func<Type, string> getXmlDocTypeString = type => templatedDescribeType(type, t => t.FullName, "{", ",", "}");
    Func<MethodInfo, string, string> getXmlDocComment = (m, indent) => {
        var argumentTypesString = string.Join(",", m.GetParameters().Select(p => getXmlDocTypeString(p.ParameterType)));
        var memberString = string.Format("M:{0}.{1}({2})", m.DeclaringType.FullName, m.Name, argumentTypesString);
        
        var commentElement = xmlDoc.XPathSelectElement("doc/members/member[@name='" + memberString + "']");
        if (commentElement == null)
            return indent + "#warning No comment found for " + memberString;
        
        var builder = new StringBuilder();
        var first = true;
        foreach (var element in commentElement.Elements()) {
            if (!first)
                builder.AppendLine();
            
            first = false;
            builder.Append(indent).Append("/// ")
                   .Append(Regex.Replace(element.ToString(), @"\s*\r\n\s*", ""));
        }
        
        return builder.ToString();
    };
#>
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Linq.Expressions;

namespace AshMind.Extensions {
    /// <summary>
    /// Provides a set of extension methods for operations on <see cref="Expression"/>.
    /// </summary>
    public static class ExpressionExtensions {<#
        foreach (var method in typeof(Expression).GetMethods(BindingFlags.Public | BindingFlags.Static).OrderBy(m => m.Name)) { 
            var parameters = method.GetParameters();
               if (parameters.Length == 0 || parameters[0].ParameterType != typeof(Expression))
                   continue;
            
               if (excludedMethodNames.Contains(method.Name))
                   continue;            

            var comment = getXmlDocComment(method, "        ");
        
            var isNet4 = net4ExpressionTypes.Contains(method.ReturnType)
                      || net4MethodNames.Contains(method.Name)
                      || net4MethodNames.Contains(method.Name + ":" + parameters.Length);

            var parameterString = string.Join(", ", parameters.Select(p => describeType(p.ParameterType) + " " + p.Name));
            var argumentString = string.Join(", ", parameters.Select(p => p.Name));

            WriteLine("");
            
            if (isNet4)
                WriteLine("        #if NET4");

            WriteLine(comment);
            WriteLine("        public static {0} {1}(this {2}) {{", method.ReturnType.Name, method.Name, parameterString);
            WriteLine("            return Expression.{0}({1});", method.Name, argumentString);
            WriteLine("        }");

            if (isNet4)
                WriteLine("        #endif");            
       } #>
    }
}